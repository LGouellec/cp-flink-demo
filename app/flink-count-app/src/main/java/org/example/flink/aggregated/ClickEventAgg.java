/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.flink.aggregated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClickEventAgg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6679063749807625643L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClickEventAgg\",\"namespace\":\"org.example.flink.aggregated\",\"fields\":[{\"name\":\"window_start\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Start timestamp of the aggregation window in milliseconds since the epoch\"},{\"name\":\"window_end\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"End timestamp of the aggregation window in milliseconds since the epoch\"},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"doc\":\"Category for the aggregated data (can be null if source category is null)\"},{\"name\":\"event_count\",\"type\":\"long\",\"doc\":\"Count of events within the window\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ClickEventAgg> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClickEventAgg> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClickEventAgg> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClickEventAgg> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClickEventAgg> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClickEventAgg to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClickEventAgg from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClickEventAgg instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClickEventAgg fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Start timestamp of the aggregation window in milliseconds since the epoch */
  private java.time.Instant window_start;
  /** End timestamp of the aggregation window in milliseconds since the epoch */
  private java.time.Instant window_end;
  /** Category for the aggregated data (can be null if source category is null) */
  private java.lang.CharSequence category;
  /** Count of events within the window */
  private long event_count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClickEventAgg() {}

  /**
   * All-args constructor.
   * @param window_start Start timestamp of the aggregation window in milliseconds since the epoch
   * @param window_end End timestamp of the aggregation window in milliseconds since the epoch
   * @param category Category for the aggregated data (can be null if source category is null)
   * @param event_count Count of events within the window
   */
  public ClickEventAgg(java.time.Instant window_start, java.time.Instant window_end, java.lang.CharSequence category, java.lang.Long event_count) {
    this.window_start = window_start.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.window_end = window_end.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.category = category;
    this.event_count = event_count;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return window_start;
    case 1: return window_end;
    case 2: return category;
    case 3: return event_count;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: window_start = (java.time.Instant)value$; break;
    case 1: window_end = (java.time.Instant)value$; break;
    case 2: category = (java.lang.CharSequence)value$; break;
    case 3: event_count = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'window_start' field.
   * @return Start timestamp of the aggregation window in milliseconds since the epoch
   */
  public java.time.Instant getWindowStart() {
    return window_start;
  }


  /**
   * Sets the value of the 'window_start' field.
   * Start timestamp of the aggregation window in milliseconds since the epoch
   * @param value the value to set.
   */
  public void setWindowStart(java.time.Instant value) {
    this.window_start = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'window_end' field.
   * @return End timestamp of the aggregation window in milliseconds since the epoch
   */
  public java.time.Instant getWindowEnd() {
    return window_end;
  }


  /**
   * Sets the value of the 'window_end' field.
   * End timestamp of the aggregation window in milliseconds since the epoch
   * @param value the value to set.
   */
  public void setWindowEnd(java.time.Instant value) {
    this.window_end = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'category' field.
   * @return Category for the aggregated data (can be null if source category is null)
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * Category for the aggregated data (can be null if source category is null)
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'event_count' field.
   * @return Count of events within the window
   */
  public long getEventCount() {
    return event_count;
  }


  /**
   * Sets the value of the 'event_count' field.
   * Count of events within the window
   * @param value the value to set.
   */
  public void setEventCount(long value) {
    this.event_count = value;
  }

  /**
   * Creates a new ClickEventAgg RecordBuilder.
   * @return A new ClickEventAgg RecordBuilder
   */
  public static org.example.flink.aggregated.ClickEventAgg.Builder newBuilder() {
    return new org.example.flink.aggregated.ClickEventAgg.Builder();
  }

  /**
   * Creates a new ClickEventAgg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClickEventAgg RecordBuilder
   */
  public static org.example.flink.aggregated.ClickEventAgg.Builder newBuilder(org.example.flink.aggregated.ClickEventAgg.Builder other) {
    if (other == null) {
      return new org.example.flink.aggregated.ClickEventAgg.Builder();
    } else {
      return new org.example.flink.aggregated.ClickEventAgg.Builder(other);
    }
  }

  /**
   * Creates a new ClickEventAgg RecordBuilder by copying an existing ClickEventAgg instance.
   * @param other The existing instance to copy.
   * @return A new ClickEventAgg RecordBuilder
   */
  public static org.example.flink.aggregated.ClickEventAgg.Builder newBuilder(org.example.flink.aggregated.ClickEventAgg other) {
    if (other == null) {
      return new org.example.flink.aggregated.ClickEventAgg.Builder();
    } else {
      return new org.example.flink.aggregated.ClickEventAgg.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClickEventAgg instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClickEventAgg>
    implements org.apache.avro.data.RecordBuilder<ClickEventAgg> {

    /** Start timestamp of the aggregation window in milliseconds since the epoch */
    private java.time.Instant window_start;
    /** End timestamp of the aggregation window in milliseconds since the epoch */
    private java.time.Instant window_end;
    /** Category for the aggregated data (can be null if source category is null) */
    private java.lang.CharSequence category;
    /** Count of events within the window */
    private long event_count;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.flink.aggregated.ClickEventAgg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.window_start)) {
        this.window_start = data().deepCopy(fields()[0].schema(), other.window_start);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.window_end)) {
        this.window_end = data().deepCopy(fields()[1].schema(), other.window_end);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.event_count)) {
        this.event_count = data().deepCopy(fields()[3].schema(), other.event_count);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ClickEventAgg instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.flink.aggregated.ClickEventAgg other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.window_start)) {
        this.window_start = data().deepCopy(fields()[0].schema(), other.window_start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.window_end)) {
        this.window_end = data().deepCopy(fields()[1].schema(), other.window_end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_count)) {
        this.event_count = data().deepCopy(fields()[3].schema(), other.event_count);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'window_start' field.
      * Start timestamp of the aggregation window in milliseconds since the epoch
      * @return The value.
      */
    public java.time.Instant getWindowStart() {
      return window_start;
    }


    /**
      * Sets the value of the 'window_start' field.
      * Start timestamp of the aggregation window in milliseconds since the epoch
      * @param value The value of 'window_start'.
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder setWindowStart(java.time.Instant value) {
      validate(fields()[0], value);
      this.window_start = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'window_start' field has been set.
      * Start timestamp of the aggregation window in milliseconds since the epoch
      * @return True if the 'window_start' field has been set, false otherwise.
      */
    public boolean hasWindowStart() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'window_start' field.
      * Start timestamp of the aggregation window in milliseconds since the epoch
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder clearWindowStart() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'window_end' field.
      * End timestamp of the aggregation window in milliseconds since the epoch
      * @return The value.
      */
    public java.time.Instant getWindowEnd() {
      return window_end;
    }


    /**
      * Sets the value of the 'window_end' field.
      * End timestamp of the aggregation window in milliseconds since the epoch
      * @param value The value of 'window_end'.
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder setWindowEnd(java.time.Instant value) {
      validate(fields()[1], value);
      this.window_end = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'window_end' field has been set.
      * End timestamp of the aggregation window in milliseconds since the epoch
      * @return True if the 'window_end' field has been set, false otherwise.
      */
    public boolean hasWindowEnd() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'window_end' field.
      * End timestamp of the aggregation window in milliseconds since the epoch
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder clearWindowEnd() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Category for the aggregated data (can be null if source category is null)
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * Category for the aggregated data (can be null if source category is null)
      * @param value The value of 'category'.
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Category for the aggregated data (can be null if source category is null)
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * Category for the aggregated data (can be null if source category is null)
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder clearCategory() {
      category = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_count' field.
      * Count of events within the window
      * @return The value.
      */
    public long getEventCount() {
      return event_count;
    }


    /**
      * Sets the value of the 'event_count' field.
      * Count of events within the window
      * @param value The value of 'event_count'.
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder setEventCount(long value) {
      validate(fields()[3], value);
      this.event_count = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'event_count' field has been set.
      * Count of events within the window
      * @return True if the 'event_count' field has been set, false otherwise.
      */
    public boolean hasEventCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'event_count' field.
      * Count of events within the window
      * @return This builder.
      */
    public org.example.flink.aggregated.ClickEventAgg.Builder clearEventCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClickEventAgg build() {
      try {
        ClickEventAgg record = new ClickEventAgg();
        record.window_start = fieldSetFlags()[0] ? this.window_start : (java.time.Instant) defaultValue(fields()[0]);
        record.window_end = fieldSetFlags()[1] ? this.window_end : (java.time.Instant) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.event_count = fieldSetFlags()[3] ? this.event_count : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClickEventAgg>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClickEventAgg>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClickEventAgg>
    READER$ = (org.apache.avro.io.DatumReader<ClickEventAgg>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










