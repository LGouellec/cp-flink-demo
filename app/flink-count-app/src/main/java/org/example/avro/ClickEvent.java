/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClickEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1100667839682600061L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClickEvent\",\"namespace\":\"org.example.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Unique identifier for the event\"},{\"name\":\"userId\",\"type\":\"string\",\"doc\":\"User Id which click on a specific product\"},{\"name\":\"productId\",\"type\":\"string\",\"doc\":\"Product Id targeted by this event\"},{\"name\":\"userLocation\",\"type\":\"string\",\"doc\":\"Location (mainly the country or the city) of the user\"},{\"name\":\"event_time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of the event in milliseconds since the epoch\"},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional category for grouping\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ClickEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClickEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClickEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClickEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClickEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClickEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClickEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClickEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClickEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the event */
  private java.lang.CharSequence id;
  /** User Id which click on a specific product */
  private java.lang.CharSequence userId;
  /** Product Id targeted by this event */
  private java.lang.CharSequence productId;
  /** Location (mainly the country or the city) of the user */
  private java.lang.CharSequence userLocation;
  /** Timestamp of the event in milliseconds since the epoch */
  private java.time.Instant event_time;
  /** Optional category for grouping */
  private java.lang.CharSequence category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClickEvent() {}

  /**
   * All-args constructor.
   * @param id Unique identifier for the event
   * @param userId User Id which click on a specific product
   * @param productId Product Id targeted by this event
   * @param userLocation Location (mainly the country or the city) of the user
   * @param event_time Timestamp of the event in milliseconds since the epoch
   * @param category Optional category for grouping
   */
  public ClickEvent(java.lang.CharSequence id, java.lang.CharSequence userId, java.lang.CharSequence productId, java.lang.CharSequence userLocation, java.time.Instant event_time, java.lang.CharSequence category) {
    this.id = id;
    this.userId = userId;
    this.productId = productId;
    this.userLocation = userLocation;
    this.event_time = event_time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.category = category;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return productId;
    case 3: return userLocation;
    case 4: return event_time;
    case 5: return category;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: userId = (java.lang.CharSequence)value$; break;
    case 2: productId = (java.lang.CharSequence)value$; break;
    case 3: userLocation = (java.lang.CharSequence)value$; break;
    case 4: event_time = (java.time.Instant)value$; break;
    case 5: category = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique identifier for the event
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique identifier for the event
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return User Id which click on a specific product
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * User Id which click on a specific product
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return Product Id targeted by this event
   */
  public java.lang.CharSequence getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * Product Id targeted by this event
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'userLocation' field.
   * @return Location (mainly the country or the city) of the user
   */
  public java.lang.CharSequence getUserLocation() {
    return userLocation;
  }


  /**
   * Sets the value of the 'userLocation' field.
   * Location (mainly the country or the city) of the user
   * @param value the value to set.
   */
  public void setUserLocation(java.lang.CharSequence value) {
    this.userLocation = value;
  }

  /**
   * Gets the value of the 'event_time' field.
   * @return Timestamp of the event in milliseconds since the epoch
   */
  public java.time.Instant getEventTime() {
    return event_time;
  }


  /**
   * Sets the value of the 'event_time' field.
   * Timestamp of the event in milliseconds since the epoch
   * @param value the value to set.
   */
  public void setEventTime(java.time.Instant value) {
    this.event_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'category' field.
   * @return Optional category for grouping
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * Optional category for grouping
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Creates a new ClickEvent RecordBuilder.
   * @return A new ClickEvent RecordBuilder
   */
  public static org.example.avro.ClickEvent.Builder newBuilder() {
    return new org.example.avro.ClickEvent.Builder();
  }

  /**
   * Creates a new ClickEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClickEvent RecordBuilder
   */
  public static org.example.avro.ClickEvent.Builder newBuilder(org.example.avro.ClickEvent.Builder other) {
    if (other == null) {
      return new org.example.avro.ClickEvent.Builder();
    } else {
      return new org.example.avro.ClickEvent.Builder(other);
    }
  }

  /**
   * Creates a new ClickEvent RecordBuilder by copying an existing ClickEvent instance.
   * @param other The existing instance to copy.
   * @return A new ClickEvent RecordBuilder
   */
  public static org.example.avro.ClickEvent.Builder newBuilder(org.example.avro.ClickEvent other) {
    if (other == null) {
      return new org.example.avro.ClickEvent.Builder();
    } else {
      return new org.example.avro.ClickEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClickEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClickEvent>
    implements org.apache.avro.data.RecordBuilder<ClickEvent> {

    /** Unique identifier for the event */
    private java.lang.CharSequence id;
    /** User Id which click on a specific product */
    private java.lang.CharSequence userId;
    /** Product Id targeted by this event */
    private java.lang.CharSequence productId;
    /** Location (mainly the country or the city) of the user */
    private java.lang.CharSequence userLocation;
    /** Timestamp of the event in milliseconds since the epoch */
    private java.time.Instant event_time;
    /** Optional category for grouping */
    private java.lang.CharSequence category;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.avro.ClickEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.userLocation)) {
        this.userLocation = data().deepCopy(fields()[3].schema(), other.userLocation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.event_time)) {
        this.event_time = data().deepCopy(fields()[4].schema(), other.event_time);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ClickEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.avro.ClickEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userLocation)) {
        this.userLocation = data().deepCopy(fields()[3].schema(), other.userLocation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.event_time)) {
        this.event_time = data().deepCopy(fields()[4].schema(), other.event_time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique identifier for the event
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique identifier for the event
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique identifier for the event
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique identifier for the event
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * User Id which click on a specific product
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * User Id which click on a specific product
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * User Id which click on a specific product
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * User Id which click on a specific product
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * Product Id targeted by this event
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * Product Id targeted by this event
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.productId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * Product Id targeted by this event
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productId' field.
      * Product Id targeted by this event
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userLocation' field.
      * Location (mainly the country or the city) of the user
      * @return The value.
      */
    public java.lang.CharSequence getUserLocation() {
      return userLocation;
    }


    /**
      * Sets the value of the 'userLocation' field.
      * Location (mainly the country or the city) of the user
      * @param value The value of 'userLocation'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setUserLocation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.userLocation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userLocation' field has been set.
      * Location (mainly the country or the city) of the user
      * @return True if the 'userLocation' field has been set, false otherwise.
      */
    public boolean hasUserLocation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userLocation' field.
      * Location (mainly the country or the city) of the user
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearUserLocation() {
      userLocation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_time' field.
      * Timestamp of the event in milliseconds since the epoch
      * @return The value.
      */
    public java.time.Instant getEventTime() {
      return event_time;
    }


    /**
      * Sets the value of the 'event_time' field.
      * Timestamp of the event in milliseconds since the epoch
      * @param value The value of 'event_time'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setEventTime(java.time.Instant value) {
      validate(fields()[4], value);
      this.event_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'event_time' field has been set.
      * Timestamp of the event in milliseconds since the epoch
      * @return True if the 'event_time' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'event_time' field.
      * Timestamp of the event in milliseconds since the epoch
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearEventTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Optional category for grouping
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * Optional category for grouping
      * @param value The value of 'category'.
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.category = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Optional category for grouping
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'category' field.
      * Optional category for grouping
      * @return This builder.
      */
    public org.example.avro.ClickEvent.Builder clearCategory() {
      category = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClickEvent build() {
      try {
        ClickEvent record = new ClickEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.productId = fieldSetFlags()[2] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.userLocation = fieldSetFlags()[3] ? this.userLocation : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.event_time = fieldSetFlags()[4] ? this.event_time : (java.time.Instant) defaultValue(fields()[4]);
        record.category = fieldSetFlags()[5] ? this.category : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClickEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClickEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClickEvent>
    READER$ = (org.apache.avro.io.DatumReader<ClickEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










